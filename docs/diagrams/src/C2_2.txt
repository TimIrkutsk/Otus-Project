@startuml
!include <C4/C4_Container>

title Система управления запасами - Инвентаризация и производство (Уровень 2)

' Пользователи
Person(operator, "Оператор линии", "Проводит инвентаризацию, утилизацию, пополнение запаса у роботов")

' Внешние системы
System_Ext(robot, "Роботизированная линия", "Промышленный робот")

' Граница системы
System_Boundary(inventory_system, "Система инвентаризации и управления производством") {

    ' Frontend контейнеры
    Container(mobile_app, "Мобильное приложение", "React Native", "Инвентаризация, утилизация, пополнение запаса")
    
    ' Backend контейнеры
    Container(api_gateway, "API Gateway", "Spring Cloud Gateway", "Единая точка входа")
    Container(service_discovery, "Обнаружение сервисов", "Netflix Eureka", "Регистрация сервисов")
    
    Container(auth_service, "Сервис аутентификации", "Spring Boot, JWT", "Управление доступом")
    
    Container(inventory_service, "Сервис инвентаризации", "Spring Boot", "Пополнение запаса роботов, управление остатками, сроками")
    Container(robot_integration, "Сервис интеграции с роботом", "Spring Boot, gRPC", "Взаимодействие с линией")
    Container(reporting_service, "Сервис отчетности", "Spring Boot", "Аналитика и отчеты")
    
    ' Базы данных
    ContainerDb(inventory_db, "База инвентаризации", "PostgreSQL", "Хранение данных о партиях")
    ContainerDb(reporting_db, "База отчетности", "ClickHouse", "Аналитические данные")
    ContainerDb(cache_db, "Кэш-хранилище", "Redis", "Кэш для высокопроизводительного доступа")
    
    ' Инфраструктурные сервисы
    Container(message_broker, "Брокер сообщений", "Apache Kafka", "Асинхронная коммуникация")
}

' Внешние сервисы (из другой группы)
Container_Ext(order_service, "Сервис заказов", "Spring Boot", "Получает данные об остатках")

' Взаимодействия пользователей
Rel(operator, mobile_app, "Проводит инвентаризацию, утилизирует партии, пополняет запас", "HTTPS")

' Frontend -> Backend
Rel(mobile_app, api_gateway, "Вызывает API", "REST")

' Инфраструктурные связи
Rel(api_gateway, service_discovery, "Обнаружение сервисов", "HTTPS")
Rel(api_gateway, auth_service, "Проверяет аутентификацию", "JWT")
Rel(auth_service, service_discovery, "Регистрация сервиса", "HTTPS")

' API Gateway -> Бизнес-сервисы
Rel(api_gateway, inventory_service, "Маршрутизирует запросы инвентаризации", "REST")
Rel(api_gateway, reporting_service, "Маршрутизирует запросы отчетов", "REST")
Rel(inventory_service, service_discovery, "Регистрация сервиса", "HTTPS")
Rel(reporting_service, service_discovery, "Регистрация сервиса", "HTTPS")

' Интеграции с внешними системами
Rel(robot_integration, robot, "Обмен данными в реальном времени", "gRPC/WebSocket")

' Внутренние связи сервисов
Rel(inventory_service, robot_integration, "Передает данные для проверки срока/получает запрос на пополнение запаса", "REST")

' Сервисы -> Базы данных
Rel(inventory_service, inventory_db, "Чтение/запись данных инвентаризации", "JDBC")
Rel(reporting_service, reporting_db, "Чтение/запись аналитических данных", "JDBC")
Rel(auth_service, cache_db, "Хранение сессий и токенов", "Redis Protocol")

' Кэширование для производительности
Rel(inventory_service, cache_db, "Кэширование остатков и статусов", "Redis Protocol")
Rel(robot_integration, cache_db, "Быстрый доступ к данным для робота", "Redis Protocol")

' Асинхронная коммуникация
Rel(inventory_service, message_broker, "Публикует события изменений", "Kafka")
Rel(message_broker, reporting_service, "Доставляет события для аналитики", "Kafka")
Rel(message_broker, robot_integration, "Доставляет события блокировок", "Kafka")
Rel(message_broker, order_service, "Доставляет события об остатках", "Kafka")

@enduml