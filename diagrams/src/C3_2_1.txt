@startuml
!include <C4/C4_Component>

title Сервис интеграции с роботом - Компонентная диаграмма (Уровень 3)

Container_Boundary(robot_integration, "Сервис интеграции с роботом") {
    Component(robot_protocol, "Обработчик протокола", "gRPC Service", "Обработка gRPC/WebSocket соединений")
    Component(shelf_life_checker, "Проверка сроков", "Spring Bean", "Проверка сроков годности (<100 мс)")
    Component(stock_cache_manager, "Менеджер кэша", "Spring Bean", "Управление кэшем остатков в Redis")
    Component(emergency_handler, "Обработчик аварий", "Spring Bean", "Обработка аварийных ситуаций")
    
    Component(robot_grpc_service, "gRPC Сервис", "gRPC", "gRPC endpoint для робота")
    Component(cache_sync_service, "Сервис синхронизации", "Spring Bean", "Синхронизация кэша с основными данными")
}

' Внутренние связи
Rel(robot_grpc_service, robot_protocol, "Обработка запросов", "Метод вызов")
Rel(robot_protocol, shelf_life_checker, "Проверка разрешений", "Метод вызов")
Rel(shelf_life_checker, stock_cache_manager, "Запрос данных", "Метод вызов")
Rel(robot_protocol, emergency_handler, "Аварийные ситуации", "Метод вызов")
Rel(cache_sync_service, stock_cache_manager, "Обновление кэша", "Метод вызов")

' Внешние зависимости
Container_Ext(cache_db, "Кэш-хранилище", "Redis")
Container_Ext(message_broker, "Брокер сообщений", "Kafka")
Container_Ext(robot, "Роботизированная линия", "gRPC Client")
Container_Ext(shelf_life_service, "Сервис контроля сроков", "REST API")

' Внешние связи
Rel(robot_grpc_service, robot, "Взаимодействие", "gRPC/WebSocket")
Rel(stock_cache_manager, cache_db, "Чтение/запись", "Redis Protocol")
Rel(cache_sync_service, message_broker, "Получение обновлений", "Kafka")
Rel(shelf_life_checker, shelf_life_service, "Проверка блокировок", "REST")

Note right of shelf_life_checker {
    <b>Критические требования:</b>
    • Ответ <100 мс
    • Прямой доступ к кэшу
    • Резервирование при сбоях
}
@enduml